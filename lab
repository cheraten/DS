__________________________________________________
1_1
A. Report about income from sales by product, client and sales person. Please mind discounts. Also mind that for some combinations of values in these dimensions  there are no sales at all, so create two versions of queries with and without zero values.

SELECT 
 P.Name as ProductName,
 C.CustomerID as Customer,
 CASE 
  WHEN grouping(P.Name)=1
   THEN '//GRAND TOTAL:'
  WHEN grouping(C.CustomerID)=1
   THEN '//TOTAL BY PRODUCT:'
  ELSE C.SalesPerson END AS SalesPerson,
 SUM(SOD.LineTotal) as SUM
FROM 
 [SalesLT].[Customer] C,
 [SalesLT].[SalesOrderHeader] SOH,
 [SalesLT].[SalesOrderDetail] SOD,
 [SalesLT].[Product] P
WHERE
 C.CustomerID = SOH.CustomerID
 AND SOH.SalesOrderID = SOD.SalesOrderID
 AND SOD.ProductID = P.ProductID
GROUP BY ROLLUP(P.Name, C.CustomerID, C.SalesPerson)
ORDER BY P.Name, C.CustomerID, C.SalesPerson;

____

SELECT 
 P.Name as ProductName,
 C.CustomerID as Customer,
 CASE 
  WHEN grouping(P.Name)=1
   THEN '//GRAND TOTAL:'
 ELSE C.SalesPerson END AS SalesPerson,
 SUM(SOD.LineTotal) as SUM
FROM 
 [SalesLT].[SalesOrderHeader] SOH
RIGHT OUTER JOIN 
 [SalesLT].[Customer] C ON 
 SOH.customerID = C.customerID
LEFT OUTER JOIN 
 [SalesLT].[SalesOrderDetail] SOD ON 
 SOH.SalesOrderID = SOD.SalesOrderID 
LEFT OUTER JOIN 
 [SalesLT].[Product] P ON 
 SOD.productID = P.productID 
GROUP BY ROLLUP(P.Name, C.CustomerID, C.SalesPerson)
UNION
SELECT 
 P.Name as ProductName,
 C.CustomerID as Customer,
 CASE 
  WHEN grouping(P.Name)=1
   THEN '//GRAND TOTAL:'
 ELSE C.SalesPerson END AS SalesPerson,
 SUM(SOD.LineTotal) as SUM
FROM 
 [SalesLT].[SalesOrderHeader] SOH
LEFT OUTER JOIN 
 [SalesLT].[Customer] C ON 
 SOH.customerID = C.customerID
LEFT OUTER JOIN 
 [SalesLT].[SalesOrderDetail] SOD ON 
 SOH.SalesOrderID = SOD.SalesOrderID 
RIGHT OUTER JOIN 
 [SalesLT].[Product] P ON 
 SOD.productID = P.productID 
GROUP BY ROLLUP(P.Name, C.CustomerID, C.SalesPerson)

___________________________________________________
1_2
B. Report about income from sales by product, client and country (region) for billing, shipping and client residency as they can be different. Is it case according our data? But you should generalize in any case. Please mind discounts. You should include in that report only data that supported by sales (so no zero entries except discounted price is zero).

SELECT 
 P.Name as ProductName,
 SOH.CustomerID as CustomerID,
 Acust.CountryRegion as residencyCountryRegion,
 Aship.CountryRegion as shippingCountryRegion,
 CASE 
  WHEN grouping(P.Name)=1
   THEN '//GRAND TOTAL:'
  WHEN grouping(SOH.CustomerID)=1
   THEN '//TOTAL BY PRODUCT:'
  ELSE Abill.CountryRegion END AS billingCountryRegion,
 SUM(SOD.LineTotal) as SUM
FROM 
 [SalesLT].[SalesOrderHeader] SOH
INNER JOIN 
 [SalesLT].[SalesOrderDetail] SOD ON 
 SOH.SalesOrderID = SOD.SalesOrderID
INNER JOIN 
 [SalesLT].[Product] P ON 
 SOD.ProductID = P.ProductID
INNER JOIN 
 [SalesLT].[CustomerAddress] CA ON 
 SOH.CustomerID = CA.CustomerID
INNER JOIN 
 [SalesLT].[Address] Acust ON 
 Acust.AddressID = CA.AddressID
INNER JOIN 
 [SalesLT].[Address] Aship ON 
 Aship.AddressID = SOH.ShipToAddressID
INNER JOIN 
 [SalesLT].[Address] Abill ON 
 Abill.AddressID = SOH.BillToAddressID
GROUP BY GROUPING SETS((P.Name, SOH.CustomerID, Acust.CountryRegion, Aship.CountryRegion, Abill.CountryRegion), (P.Name, SOH.CustomerID), (P.Name), ())
ORDER BY P.Name, SOH.CustomerID, Acust.CountryRegion, Aship.CountryRegion, Abill.CountryRegion;

__________________________________________________
1_3
C. Report about income from sales and provided discounts by location in form of hierarchy city>state/province>country/region. In that report you can rely on unique geographical names, but in general it is not the case. Think about how to solve that task in case that there is a possibility of existence of multiple cities in the same province with the same name. For big cities someone would need more detailed report that can include city districts, solve this task for extra points.

SELECT
 CONCAT(A.CountryRegion, '>', A.StateProvince, '>', A.City) as PATH,
 SOD.UnitPriceDiscount AS Discount,
 SUM(SOD.LineTotal) as SUM
FROM 
 [SalesLT].[Address] A,
 [SalesLT].[CustomerAddress] CA,
 [SalesLT].[Customer] C,
 [SalesLT].[SalesOrderHeader] SOH,
 [SalesLT].[SalesOrderDetail] SOD
WHERE
 C.CustomerID = CA.CustomerID
 AND CA.AddressID = A.AddressID
 AND C.CustomerID = SOH.CustomerID
 AND SOH.SalesOrderID = SOD.SalesOrderID
GROUP BY ROLLUP(A.CountryRegion, A.StateProvince, A.City, UnitPriceDiscount)
ORDER BY A.CountryRegion DESC, A.StateProvince DESC, A.City DESC;

__________________________________________________
1_4
D. Report about income from sales and provided discounts by product and hierarchy of product categories (high level category-> next level category->...->low level category->product). Please mind that some products can be outside (any) category or be only partially categorized (be not in low level of hierarchy). You can rely on you data to solve to solve this task (especially on that how much subcategories in the current data set), but try to think how to solve this task in general (with arbitrary category tree).

SELECT 
 CONCAT(parentPC.Name, '>', childPC.Name, '>', P.Name) as PATH,
 SOD.UnitPriceDiscount AS Discount,
 SUM(SOD.LineTotal) as SUM
FROM 
 [SalesLT].[Customer] C,
 [SalesLT].[SalesOrderHeader] SOH,
 [SalesLT].[SalesOrderDetail] SOD,
 [SalesLT].[Product] P,
 [SalesLT].[ProductCategory] childPC,
 [SalesLT].[ProductCategory] parentPC
WHERE
 C.CustomerID = SOH.CustomerID
 AND SOH.SalesOrderID = SOD.SalesOrderID
 AND SOD.ProductID = P.ProductID
 AND P.ProductCategoryID = childPC.ProductCategoryID
 AND childPC.ParentProductCategoryID = parentPC.ProductCategoryID
GROUP BY ROLLUP(parentPC.Name, childPC.Name, P.Name, SOD.UnitPriceDiscount)
ORDER BY parentPC.Name DESC;

__________________________________________________
1.5
E. Create integral report on number of product sales by product, client, sales person and hierarchy of regions.

SELECT
CONCAT(A.CountryRegion, '>', A.StateProvince, '>', A.City) as PATH,
P.Name as Product,
C.CustomerID as Customer,
C.SalesPerson as SalesPerson,
SOD.UnitPriceDiscount AS Discount,
SUM(SOD.LineTotal) as SUM
FROM
[SalesLT].[Address] A,
[SalesLT].[CustomerAddress] CA,
[SalesLT].[Customer] C,
[SalesLT].[SalesOrderHeader] SOH,
[SalesLT].[SalesOrderDetail] SOD,
[SalesLT].[Product] P
WHERE
C.CustomerID = CA.CustomerID
AND CA.AddressID = A.AddressID
AND C.CustomerID = SOH.CustomerID
AND SOH.SalesOrderID = SOD.SalesOrderID
AND SOD.ProductID = P.ProductID
GROUP BY GROUPING SETS((A.CountryRegion, A.StateProvince, A.City, P.Name, C.CustomerID, C.SalesPerson, SOD.UnitPriceDiscount), 
 (A.CountryRegion, A.StateProvince, A.City), (A.CountryRegion), ())
ORDER BY A.CountryRegion DESC, A.StateProvince DESC, A.City DESC;
__________________________________________________
2_1
A. Rank your sales persons by number of clients, report should include rank, sales person id and client number in descending order.

 SELECT
  (RANK() OVER (ORDER BY (COUNT(*)) desc)) as RANK,
  SalesPerson as SalesPerson,
  COUNT(*) as COUNT
 FROM
  [SalesLT].[Customer]
 GROUP BY SalesPerson
 ORDER by RANK;
_________________________________
2_2
B. Rank your sales persons by number of sales, your report should include all sales persons with id, dense rank and number of sales in descending order.

 SELECT
  DENSE_RANK() OVER (ORDER BY (COUNT(SOH.customerID)) desc) as RANK,
  C.SalesPerson as SalesPerson,
  COUNT(SOH.customerID) as COUNT
 FROM
  [SalesLT].[SalesOrderHeader] SOH
 RIGHT OUTER JOIN
  [SalesLT].[Customer] C ON 
  SOH.customerID = C.customerID
 GROUP BY C.SalesPerson, C.SalesPerson;

___________________________________________________
2_3
C. Rank your sales person by income from sales, your report should include all sales persons with id, rank and income in descending order.

 SELECT
  (DENSE_RANK() OVER (ORDER BY (SUM(SOD.LineTotal)) desc)) as RANK,
  C.SalesPerson as SalesPerson,
  SUM(SOD.LineTotal) as SUM
 FROM
  [SalesLT].[SalesOrderHeader] SOH
 INNER JOIN 
  [SalesLT].[SalesOrderDetail] SOD ON 
  SOH.SalesOrderID = SOD.SalesOrderID
 RIGHT OUTER JOIN
  [SalesLT].[Customer] C ON 
  SOH.customerID = C.customerID
 GROUP BY C.SalesPerson, C.SalesPerson, C.SalesPerson
 ORDER by SUM desc;

____________________________________________________
2_4
A. Rank regions / states in the country by number of customers (use main office address), your report should include country, state or region, number of customers and percent rank ordered by country (alphabetically) and number of clients (descending). In case of equality in client numbers order region or states alphabetically.

SELECT
  A.CountryRegion as CountryRegion,
  A.StateProvince as StateProvince,
  COUNT(CA.CustomerID) as COUNT,
  PERCENT_RANK() OVER (PARTITION BY A.CountryRegion ORDER BY(COUNT(CA.CustomerID))) AS PctRank 
FROM 
 [SalesLT].[Address] A,
 [SalesLT].[CustomerAddress] CA
 WHERE
  CA.AddressID = A.AddressID
  AND CA.AddressType = 'Main Office'
 GROUP BY A.CountryRegion,  StateProvince,  StateProvince, StateProvince
 ORDER by A.CountryRegion, COUNT(CA.CustomerID) DESC, A.StateProvince;
_______________________________________________________
2_5
B. Include in previous report customers without information about address. Use dense rank instead of percent rank in that report.


SELECT
  A.CountryRegion as CountryRegion,
  A.StateProvince as StateProvince,
  COUNT(C.CustomerID) as COUNT,
  DENSE_RANK() OVER (PARTITION BY A.CountryRegion ORDER BY(COUNT(C.CustomerID)) DESC) AS DnsRank 
FROM 
 [SalesLT].[CustomerAddress] CA
LEFT OUTER JOIN
 [SalesLT].[Address] A ON
 CA.AddressType = 'Main Office' 
 AND CA.AddressID = A.AddressID
RIGHT OUTER JOIN
  [SalesLT].[Customer] C ON
  C.CustomerID = CA.CustomerID
 GROUP BY A.CountryRegion,  StateProvince,  StateProvince, StateProvince
 ORDER by A.CountryRegion, COUNT(C.CustomerID) DESC, A.StateProvince;

_______________________________________________________
2_6
C. Rank cities in the country by number of customers (use main office address), your report should include country, state or region, city,  number of clients, rank (use plane rank here) and difference in number of client with previous position in by country ranking (for first position should be null). Order your report by country name (alphabetically), number of clients (descending) and city name (alphabetically).   


SELECT
A.CountryRegion as CountryRegion,
A.StateProvince as StateProvince,
A.City as City,
(RANK() OVER (ORDER BY (COUNT(CA.CustomerID)) desc)) as RANK,
COUNT(CA.CustomerID) as COUNT,
COUNT(CA.CustomerID) - LAG(COUNT(CA.CustomerID)) 
 OVER (PARTITION BY A.CountryRegion ORDER BY COUNT(CA.CustomerID) DESC, A.City) as DIFF
FROM
[SalesLT].[Address] A,
[SalesLT].[CustomerAddress] CA
WHERE
CA.AddressID = A.AddressID
AND CA.AddressType = 'Main Office'
GROUP BY CountryRegion, StateProvince, City, City
ORDER BY A.CountryRegion, COUNT(CA.CustomerID) DESC, A.City;
